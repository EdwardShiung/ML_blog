{
  "hash": "ff9acc58de522294ad53e9a7efa1c52e",
  "result": {
    "markdown": "---\ntitle: Linear & Nonlinear Regression\ntitle-block-banner: false\nauthor: Edward Xiong\ndate: '2023-11-02'\ndescription: Linear Regression and Nonlinear Regression in Machine Learning\nformat:\n  html:\n    toc: true\n    toc-location: right\ncategories:\n  - Statistics\n  - Python\n  - Machine Learning\nimage: ../../assets/linearAndNonlinear.jpg\ncomments:\n  giscus:\n    repo: EdwardShiung/ml_CS5805\n---\n\n# Introduction\n\n## Linear Regression:\n\n**Definition:**\nLinear regression is a method used for modeling the linear relationship between a dependent variable and one or more independent variables. Simple linear regression involves one independent variable, while multiple linear regression involves multiple independent variables.\n\n**Equation:**\nThe equation for simple linear regression is: \\[y = mx + b\\], where \\(y\\) is the dependent variable, \\(x\\) is the independent variable, \\(m\\) is the slope, and \\(b\\) is the intercept.\n\n**Objective:**\nThe goal of linear regression is to find the best-fitting line that minimizes the error between predicted and observed values.\n\n## Nonlinear Regression:\n\n**Definition:**\nNonlinear regression is a regression analysis where the relationship between the dependent and independent variables is not linear but can be described by a nonlinear equation.\n\n**Equation:**\nThe equation for nonlinear regression can take various forms, such as quadratic, exponential, or logarithmic functions, for example: \\[y = a \\cdot \\exp(b \\cdot x)\\].\n\n**Objective:**\nSimilar to linear regression, the objective of nonlinear regression is to find the best-fitting curve that minimizes the error between predicted and observed values.\n\n## Relationship with Machine Learning:\n\n- **Training Process:**\n  In machine learning, regression algorithms are used to learn models from data. This includes both linear and nonlinear regression, depending on the nature of the problem.\n\n- **Prediction:**\n  After training, the model can be used to predict new data points. Linear regression is suitable for simple data models, while nonlinear regression is more appropriate for complex data models due to its ability to capture nonlinear relationships.\n\n- **Feature Engineering:**\n  Feature selection, or choosing appropriate independent variables, is crucial in machine learning. The selection of features can impact the accuracy of regression models.\n\n## Linear Regression Example:\n\nIn this example, I generated a simple linear dataset where the dependent variable \\(y\\) has a linear relationship with the independent variable \\(x\\). I used the linear regression model from scikit-learn to fit the data, finding the best-fitting line. After fitting, I plotted the original data points along with the linear regression line and calculated the mean squared error. \n\nLinear regression code and plots here:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# Linear Regression Example\n# Generate synthetic data\nnp.random.seed(42)\nX_linear = 2 * np.random.rand(100, 1)\ny_linear = 4 + 3 * X_linear + np.random.randn(100, 1)\n\n# Fit a linear regression model\nlinear_reg = LinearRegression()\nlinear_reg.fit(X_linear, y_linear)\n\n# Make predictions\ny_linear_pred = linear_reg.predict(X_linear)\n\n# Plot the data and the linear regression line\nplt.figure(figsize=(8, 6))\nplt.scatter(X_linear, y_linear, color='blue', label='Actual Data')\nplt.plot(X_linear, y_linear_pred, color='red', label='Linear Regression')\nplt.title('Linear Regression Example')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n# Print the coefficients and mean squared error\nprint(f'Linear Regression Coefficients: {linear_reg.coef_[0][0]}')\nprint(f'Mean Squared Error: {mean_squared_error(y_linear, y_linear_pred)}')\n```\n\n::: {.cell-output .cell-output-display}\n![](Linear_Nonlinear_Regression_files/figure-html/cell-2-output-1.png){width=659 height=523}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Coefficients: 2.770113386438484\nMean Squared Error: 0.8065845639670531\n```\n:::\n:::\n\n\n## Nonlinear Regression Example:\n\nIn this example, I generated a nonlinear dataset where the relationship betIen the dependent variable \\(y\\) and the independent variable \\(x\\) follows a quadratic equation. I employed the linear regression model from scikit-learn but introduced a quadratic term \\(x^2\\) to capture the nonlinear relationship.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Nonlinear Regression Example\n# Generate synthetic data\nX_nonlinear = 2 * np.random.rand(100, 1)\ny_nonlinear = 0.5 * X_nonlinear**2 + X_nonlinear + 2 + np.random.randn(100, 1)\n\n# Fit a nonlinear regression model (quadratic)\nX_nonlinear_squared = np.c_[X_nonlinear, X_nonlinear**2]\nquadratic_reg = LinearRegression()\nquadratic_reg.fit(X_nonlinear_squared, y_nonlinear)\n\n# Make predictions\ny_nonlinear_pred = quadratic_reg.predict(X_nonlinear_squared)\n\n# Plot the data and the nonlinear regression curve\nplt.figure(figsize=(8, 6))\nplt.scatter(X_nonlinear, y_nonlinear, color='blue', label='Actual Data')\nplt.scatter(X_nonlinear, y_nonlinear_pred, color='red', label='Nonlinear Regression')\nplt.title('Nonlinear Regression Example')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n# Print the coefficients and mean squared error\nprint(f'Nonlinear Regression Coefficients: {quadratic_reg.coef_[0][1]}, {quadratic_reg.coef_[0][0]}')\nprint(f'Mean Squared Error: {mean_squared_error(y_nonlinear, y_nonlinear_pred)}')\n```\n\n::: {.cell-output .cell-output-display}\n![](Linear_Nonlinear_Regression_files/figure-html/cell-3-output-1.png){width=651 height=523}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNonlinear Regression Coefficients: 0.5139131449960704, 1.1110747256325477\nMean Squared Error: 0.7947997206268412\n```\n:::\n:::\n\n\nLinear regression and nonlinear regression are fundamental methods in machine learning for modeling and predicting relationships between variables. Both are part of supervised learning, where models learn from training data to make predictions.\n\n",
    "supporting": [
      "Linear_Nonlinear_Regression_files"
    ],
    "filters": [],
    "includes": {}
  }
}