{
  "hash": "3bfd85a238322c9920e313a1dbfd5a3f",
  "result": {
    "markdown": "---\ntitle: 1-4 Example for Discrete Random Variable-02\ntitle-block-banner: false\nauthor: Edward Xiong\ndate: '2023-10-26'\ndescription: Using basic example to warn up your Continuous Random Variable\nformat:\n  html:\n    toc: true\n    toc-location: right\ncategories:\n  - Statistics\n  - Python\nimage: ../../assets/pythonImage.jpg\ncomments:\n  giscus:\n    repo: EdwardShiung/ml_CS5805\n---\n\nBut how about continus random variable? The typical example in continuous random variable are height and weight. There are lots of common continous random variable in daily life, such as income, time, teamperature, speed and etc. In this section, I will use stock price to be our example because stock price can fluctuate within any real value range. I know some terminologies are hard to understand, but I will do my best to explain each of terminology.\n\n# Continuous Random Variable\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n```\n:::\n\n\n## Let's simulate a stock price in 100 days\n\n### - Seed Value\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Setting the random seed for reproducibility\nnp.random.seed(20);\n```\n:::\n\n\nThe seed value, such as 20 in this example, is a non-negative integer chosen to initialize the random number generator. If a negative number is used as the seed, it may result in an error in most libraries, and it is generally recommended to use a non-negative integer as the seed value.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Setting the 100 days\ndays = 100;\n```\n:::\n\n\n$$\n\\text{Average Daily Return} = \\left( \\frac{\\text{Today's Closing Price} - \\text{Previous Day's Closing Price}}{\\text{Previous Day's Closing Price}} \\right) \\times 100\n$$\n\n### - (Average) Daily Return & Volatility\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Daily Return\nmean_return = 0.0005;\n```\n:::\n\n\nIn financial modeling. daily return is often used as an indicator for analyzing the price movement of financila assets as it provides a more comparable measure than the price itself; Average daily represents the average of daily returns over a period of times. This assumption is often made to simplify models and capture trends in financial assets. Typically, the assumption is that the average the average daily return is constant, based on the assumption that the price movement of the asset is random, steady, and the average doesn't change over time.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nvolatility = 0.02;\n```\n:::\n\n\nVolatility refers to the degree of variation in the daily returns of a stock or financial asset. High volatility indicates significant daily return changes, while low volatility suggests relatively smaller changes. Volatility is an indicator of risk in the financial markets, and investors and traders often monitor changes in volatility to assess risk levels and adjust their investment portfolios. In many models, volatility is treated as a constant, but in reality, it may vary over time.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Using the Gaussian function to generate simulated daily returns\nreturns = np.random.normal(mean_return, volatility, days)\nprice = np.exp(np.cumsum(returns))\n```\n:::\n\n\nHere, returns represents the daily returns, and price is the simulated stock price obtained by continuously summing up these returns. \n\n### - Gaussian Function\n\nUsing the Gaussian function (or normal distribution) to simulate daily returns is based on the assumption of the Central Limit Theorem (CLT) and the simplicity and well-known statistical properties of the normal distribution.\n\nCentral Limit Theorem (CLT): The CLT states that the sum or average of a large number of independent and identically distributed random variables will be approximately normally distributed, regardless of the shape of the original distribution. As daily returns in financial markets are often considered the result of numerous independent and relatively small random events (e.g., trading decisions, market news), the CLT provides a theoretical foundation for using the normal distribution to model daily returns.\n\nSimplicity and Convenience: The Gaussian function, or normal distribution, is a simple and convenient distribution with known statistical properties. Its bell-shaped curve is easy to work with mathematically, making it a common choice for modeling financial phenomena. Using the normal distribution simplifies mathematical and statistical operations in simulation and analysis. \n\nThe Gaussian function, or normal distribution, is characterized by its probability density function (PDF:\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\nWhere:\n\n- μ (mu) is the mean (expected value),\n- σ² (sigma squared) is the variance.\n\nThe normal distribution is often referred to as the bell curve due to its characteristic shape. Its predictable properties and widespread occurrence in natural phenomena make it a common choice in financial modeling.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nplt.plot(price, label='Stock Price', color='b')\nplt.xlabel('Days')\nplt.ylabel('Stock Price')\nplt.title('Simulated Stock Price Movement')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](1-4_Implementation_files/figure-html/cell-8-output-1.png){width=597 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Plotting the probability density curve of daily returns\nplt.hist(returns, bins=30, density=True, alpha=0.6, color='b')\n\n# Using the probability density function of the normal distribution as a reference\nxmin, xmax = plt.xlim()\nx = np.linspace(xmin, xmax, 100)\np = norm.pdf(x, mean_return, volatility)\nplt.plot(x, p, 'k', linewidth=2)\n\nplt.xlabel('Daily Returns')\nplt.ylabel('Probability Density')\nplt.title('Probability Density Function of Daily Returns')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](1-4_Implementation_files/figure-html/cell-9-output-1.png){width=585 height=449}\n:::\n:::\n\n\nIn this example, we use the normal distribution to simulate daily returns, and then simulate the variation in stock prices by continuously accumulating these returns. It's important to note that this is a simple simulation, and real stock prices are influenced by a more complex set of factors.\n\n",
    "supporting": [
      "1-4_Implementation_files"
    ],
    "filters": [],
    "includes": {}
  }
}