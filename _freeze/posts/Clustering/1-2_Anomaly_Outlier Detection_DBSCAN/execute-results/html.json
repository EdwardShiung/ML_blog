{
  "hash": "4b86ba382b0049fcb5d5d91c1699cf0a",
  "result": {
    "markdown": "---\ntitle: Anomaly/Outlier Detection\ntitle-block-banner: false\nauthor: Edward Xiong\ndate: '2023-11-06'\ndescription: Understanding how to detect Anomaly/Outlier\nformat:\n  html:\n    toc: true\n    toc-location: right\ncategories:\n  - Statistics\n  - Python\n  - Machine Learning\nimage: ../../assets/machineLearning.jpg\ncomments:\n  giscus:\n    repo: EdwardShiung/ml_CS5805\n---\n\n# Introduction\nIn data science and machine learning, DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a common clustering algorithm used to uncover cluster structures within data. However, DBSCAN not only identifies clusters but also effectively detects outliers, making it a powerful tool for handling real-world data.\n\nIn DBSCAN, outliers are typically referred to as \"noise points\" or \"outlier points.\" These points differ from the main clustering structure and may represent anomalous data or outliers due to errors, noise, or other unknown reasons. DBSCAN distinguishes these outlier points by defining the concepts of \"core points\" and \"reachable points.\"\n\nBased on previous topic, I will keep going to note about how to do anomaly/outlier detection.\n\n## Dataset\nThe Mall Customer's data comes from Kaggle website, which will be used mine explanation in DBSCAN. If you want to follow my notes, please download the dataset from here:\n\nhttps://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python\n\n![image.png](attachment:image.png)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.cluster import DBSCAN\nfrom IPython.display import display, HTML\n# Loading Data from CSV file\ndf  = pd.read_csv('../../dataset/MallCustomer/Mall_Customers.csv')\n# Select dataframe:\nX = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]\n# Training Data:\nX_train = X.iloc[:160,:]\n# Testing Data:\nX_test = X.iloc[160:,:]\n# Setting the Scale\nX_scale_Income = X_train['Annual Income (k$)'];\nX_scale_Age = X_train['Age'];\nY_scale_Score = X_train['Spending Score (1-100)'];\n```\n:::\n\n\nFirstly, DBSCAN classifies data points into three types: core points, border points, and outlier points. Core points are data points that have at least min_samples neighboring points within a radius of eps. Border points have fewer than min_samples neighboring points within the eps range but still fall within the range of other core points. Outlier points are data points that are neither core points nor border points.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# pick eps & min_sample randomly\ndbscan = DBSCAN(eps = 13.5, min_samples = 5);\ndbscan.fit(X_train);\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX_train = X_train.copy();\nX_train['Cluster Status'] = dbscan.labels_;\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nX_train['Cluster Status'].value_counts().to_frame()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>Cluster Status</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>-1</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis classification allows DBSCAN to naturally identify and label outliers. Outlier points are those that cannot be assigned to any cluster and may represent rare events, errors, or other unusual phenomena in the data. Through the computation of DBSCAN, we can discover both the main clustering structure and potential outliers without the need to predefine the number of clusters.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Create subplots for visualization\nfig = plt.figure(\"DBSCAN\");\n\n(ax) = fig.subplots(nrows = 1, ncols = 2);\n\nx_income = 'Annual Income (k$)';\nx_age = 'Age';\ny_score = 'Spending Score (1-100)';\ndata = Ｘ_train[Ｘ_train['Cluster Status'] != -1];\nhue = 'Cluster Status';\n\n# Scatter plot for Age and Spending Score\nsns.scatterplot(x = x_age,\n                y = y_score,\n                data = data,\n                hue = hue,\n                legend='full',\n                palette='Set1',\n                ax=ax[0],\n                s=50)\n\n# Scatter plot for Annual Income and Spending Score\nsns.scatterplot(x = x_income,\n                y = y_score,\n                data = data,\n                hue = hue,\n                legend='full',\n                palette='Set2',\n                ax=ax[1],\n                s=50);\n\nfig.subplots_adjust(left=0.05, bottom=0.2, right=0.95, top=0.85, hspace=0.1, wspace=0.25)\n```\n\n::: {.cell-output .cell-output-display}\n![](1-2_Anomaly_Outlier Detection_DBSCAN_files/figure-html/cell-6-output-1.png){width=681 height=372}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnoise  = X_train[X_train['Cluster Status'] == -1];\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Create subplots for visualization\nfig = plt.figure(\"DBSCAN\");\n\n(ax) = fig.subplots(nrows = 1, ncols = 2);\n\nx_income = 'Annual Income (k$)';\nx_age = 'Age';\ny_score = 'Spending Score (1-100)';\ndata = Ｘ_train[Ｘ_train['Cluster Status'] != -1];\nhue = 'Cluster Status';\n\n# Scatter plot for Age and Spending Score\nsns.scatterplot(x = x_age,\n                y = y_score,\n                data = data,\n                hue = hue,\n                legend='full',\n                palette='Set1',\n                ax=ax[0],\n                s=50)\n\n# Add the outlier spot to the graph (Age & Spending Score)\nax[0].scatter(x = x_age,\n              y = y_score,\n              data = noise,\n              label = '-1',\n              c = 'black')\n# Add the legend to the graph\nax[0].legend();\n\n\n# Scatter plot for Annual Income and Spending Score\nsns.scatterplot(x = x_income,\n                y = y_score,\n                data = data,\n                hue = hue,\n                legend='full',\n                palette='Set2',\n                ax=ax[1],\n                s=50);\n\n# Add the outlier spot to the graph (Annual Income & Spending Score)\nax[1].scatter(x = x_age,\n              y = y_score,\n              data = noise,\n              label = '-1',\n              c = 'black')\n\nfig.subplots_adjust(left=0.05, bottom=0.2, right=0.95, top=0.85, hspace=0.1, wspace=0.25)\n```\n\n::: {.cell-output .cell-output-display}\n![](1-2_Anomaly_Outlier Detection_DBSCAN_files/figure-html/cell-8-output-1.png){width=681 height=372}\n:::\n:::\n\n\nAs you can see, the black spots represent outliers (not belonging to any cluster). Therefore, DBSCAN is not only an excellent clustering algorithm but also an effective tool for detecting outliers, making it valuable for addressing various challenges in handling real-world data.\n\n",
    "supporting": [
      "1-2_Anomaly_Outlier Detection_DBSCAN_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}