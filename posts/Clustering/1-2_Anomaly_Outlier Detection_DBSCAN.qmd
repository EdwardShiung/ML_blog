---
title: Anomaly/Outlier Detection
title-block-banner: false
author: Edward Xiong
date: '2023-11-06'
description: Understanding how to detect Anomaly/Outlier
format:
  html:
    toc: true
    toc-location: right
categories:
  - Statistics
  - Python
  - Machine Learning
image: ../../assets/scatterPlot.png
comments:
  giscus:
    repo: EdwardShiung/ml_CS5805
jupyter: python3
---

# Introduction
In data science and machine learning, DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a common clustering algorithm used to uncover cluster structures within data. However, DBSCAN not only identifies clusters but also effectively detects outliers, making it a powerful tool for handling real-world data.

In DBSCAN, outliers are typically referred to as "noise points" or "outlier points." These points differ from the main clustering structure and may represent anomalous data or outliers due to errors, noise, or other unknown reasons. DBSCAN distinguishes these outlier points by defining the concepts of "core points" and "reachable points."

Based on previous topic, I will keep going to note about how to do anomaly/outlier detection.

## Dataset
The Mall Customer's data comes from Kaggle website, which will be used mine explanation in DBSCAN. If you want to follow my notes, please download the dataset from here:

https://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python

![image.png](../../assets/cluster_DBSCAN.png)

```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.cluster import DBSCAN
from IPython.display import display, HTML
# Loading Data from CSV file
df  = pd.read_csv('../../dataset/MallCustomer/Mall_Customers.csv')
# Select dataframe:
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
# Training Data:
X_train = X.iloc[:160,:]
# Testing Data:
X_test = X.iloc[160:,:]
# Setting the Scale
X_scale_Income = X_train['Annual Income (k$)'];
X_scale_Age = X_train['Age'];
Y_scale_Score = X_train['Spending Score (1-100)'];
```

Firstly, DBSCAN classifies data points into three types: core points, border points, and outlier points. Core points are data points that have at least min_samples neighboring points within a radius of eps. Border points have fewer than min_samples neighboring points within the eps range but still fall within the range of other core points. Outlier points are data points that are neither core points nor border points.

```{python}
# pick eps & min_sample randomly
dbscan = DBSCAN(eps = 13.5, min_samples = 5);
dbscan.fit(X_train);
```

```{python}
X_train = X_train.copy();
X_train['Cluster Status'] = dbscan.labels_;
```

```{python}
X_train['Cluster Status'].value_counts().to_frame()
```

This classification allows DBSCAN to naturally identify and label outliers. Outlier points are those that cannot be assigned to any cluster and may represent rare events, errors, or other unusual phenomena in the data. Through the computation of DBSCAN, we can discover both the main clustering structure and potential outliers without the need to predefine the number of clusters.

```{python}
# Create subplots for visualization
fig = plt.figure("DBSCAN");

(ax) = fig.subplots(nrows = 1, ncols = 2);

x_income = 'Annual Income (k$)';
x_age = 'Age';
y_score = 'Spending Score (1-100)';
data = Ｘ_train[Ｘ_train['Cluster Status'] != -1];
hue = 'Cluster Status';

# Scatter plot for Age and Spending Score
sns.scatterplot(x = x_age,
                y = y_score,
                data = data,
                hue = hue,
                legend='full',
                palette='Set1',
                ax=ax[0],
                s=50)

# Scatter plot for Annual Income and Spending Score
sns.scatterplot(x = x_income,
                y = y_score,
                data = data,
                hue = hue,
                legend='full',
                palette='Set2',
                ax=ax[1],
                s=50);

fig.subplots_adjust(left=0.05, bottom=0.2, right=0.95, top=0.85, hspace=0.1, wspace=0.25)
```

```{python}
noise  = X_train[X_train['Cluster Status'] == -1];
```

```{python}
# Create subplots for visualization
fig = plt.figure("DBSCAN");

(ax) = fig.subplots(nrows = 1, ncols = 2);

x_income = 'Annual Income (k$)';
x_age = 'Age';
y_score = 'Spending Score (1-100)';
data = Ｘ_train[Ｘ_train['Cluster Status'] != -1];
hue = 'Cluster Status';

# Scatter plot for Age and Spending Score
sns.scatterplot(x = x_age,
                y = y_score,
                data = data,
                hue = hue,
                legend='full',
                palette='Set1',
                ax=ax[0],
                s=50)

# Add the outlier spot to the graph (Age & Spending Score)
ax[0].scatter(x = x_age,
              y = y_score,
              data = noise,
              label = '-1',
              c = 'black')
# Add the legend to the graph
ax[0].legend();


# Scatter plot for Annual Income and Spending Score
sns.scatterplot(x = x_income,
                y = y_score,
                data = data,
                hue = hue,
                legend='full',
                palette='Set2',
                ax=ax[1],
                s=50);

# Add the outlier spot to the graph (Annual Income & Spending Score)
ax[1].scatter(x = x_age,
              y = y_score,
              data = noise,
              label = '-1',
              c = 'black')

fig.subplots_adjust(left=0.05, bottom=0.2, right=0.95, top=0.85, hspace=0.1, wspace=0.25)
```

As you can see, the black spots represent outliers (not belonging to any cluster). Therefore, DBSCAN is not only an excellent clustering algorithm but also an effective tool for detecting outliers, making it valuable for addressing various challenges in handling real-world data.

